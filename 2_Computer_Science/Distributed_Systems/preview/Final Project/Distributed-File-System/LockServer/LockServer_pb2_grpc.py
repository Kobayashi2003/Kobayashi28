# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import LockServer.LockServer_pb2 as LockServer__pb2


class LockServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.lockfile = channel.unary_unary(
        '/LockServer/lockfile',
        request_serializer=LockServer__pb2.lockfileinfo.SerializeToString,
        response_deserializer=LockServer__pb2.Lock_Reply.FromString,
        )
    self.unlockfile = channel.unary_unary(
        '/LockServer/unlockfile',
        request_serializer=LockServer__pb2.unlockfileinfo.SerializeToString,
        response_deserializer=LockServer__pb2.Lock_Reply.FromString,
        )


class LockServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def lockfile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def unlockfile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LockServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'lockfile': grpc.unary_unary_rpc_method_handler(
          servicer.lockfile,
          request_deserializer=LockServer__pb2.lockfileinfo.FromString,
          response_serializer=LockServer__pb2.Lock_Reply.SerializeToString,
      ),
      'unlockfile': grpc.unary_unary_rpc_method_handler(
          servicer.unlockfile,
          request_deserializer=LockServer__pb2.unlockfileinfo.FromString,
          response_serializer=LockServer__pb2.Lock_Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'LockServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
